#!/usr/bin/perl

use warnings;
use strict;

use CPANPLUS::Backend;
use Term::ReadLine;
use Getopt::Long;
use English qw(no_match_vars);
use Pod::Usage;
use 5.010;
use Cwd;

use LWP::UserAgent;
use HTTP::Cookies;

eval { require CPANPLUS::Dist::Arch; 1; }
    or die <<END_ERR;
cpan2aur: CPANPLUS::Dist::Arch must be installed for this script to work.
END_ERR

## COMMAND LINE ARGUMENTS
##############################################################################

my ($DIRECTORY, $VERBOSE, $UPLOAD, $QUIET, $FORCE, $HELP, $MAN, $NAME);

sub PKGBUILD_ERRCODE() { 2 }
sub TOOQUIET_ERRCODE() { 3 }

sub AUR_LOGIN_URI()    { 'http://aur.archlinux.org/' }
sub AUR_UPLOAD_URI()   { 'http://aur.archlinux.org/pkgsubmit.php' }
sub COOKIE_NAME()      { 'AURSID' }
sub CAT_LIB()          { 10 };

my $BAD_LOGIN_MSG  = 'Bad username or password.';
my $NEED_LOGIN_MSG = 'You must create an account before you can upload packages.';
my $PKG_EXISTS_MSG = qr{You are not allowed to overwrite the <b>.*?</b> package.};
my $CFGPATH        = "$ENV{HOME}/.cpan2aur";

my $NEED_LOGIN_ERR = "ERROR\nLogin session was invalid.\n";
my $PKG_EXISTS_ERR = "ERROR\nYou tried to submit a package you do not own.\n";

GetOptions( 'directory' => \$DIRECTORY,
            'verbose'   => \$VERBOSE,
            'upload:s'  => \$UPLOAD,
            'name:s'    => \$NAME,
            'force'     => \$FORCE,
            'quiet'     => \$QUIET,
            'man'       => \$MAN,
            'help'      => \$HELP,
           );

pod2usage( -message => 'We cannot be both verbose and quiet!',
           -verbose => 0,
           -retval  => 1 ) if ( $VERBOSE && $QUIET);

pod2usage( -verbose => 1 ) if ( $HELP );
pod2usage( -verbose => 0 ) unless ( @ARGV );

## AUR PACKAGE BUILDING
##############################################################################

sub msg
{
    print $_[0] unless $QUIET;
}

sub confirm_overwrite
{
    my ($pkgdir) = @_;

    return 1              if $FORCE; # user asked to force confirm
    exit PKGBUILD_ERRCODE if $QUIET; # exit program with error if we're quiet

    USER_QUESTION:
    {
        my $rl = Term::ReadLine->new( 'cpan2aur' );
            
        print "${pkgdir}/PKGBUILD already exists, overwrite? [y/N] ";
        my $answer = $rl->readline;
        
        $answer ||= q{n};
        redo USER_QUESTION unless $answer =~ /\A[yn]/i;
 
        return $answer =~ /\Ay/i;
    }

    die 'Unknown error';
}

sub create_aurpkgdir
{
    my $dist_obj = shift;
    my $pkgname = $dist_obj->status->pkgname;
    my $pkgver  = $dist_obj->status->pkgver;
    my $pkgsrc  = 'sourcefile.tar.gz';

    if ( -d $pkgname ) {
        # If package directory exists, offer to overwrite PKGBUILD
        return unless confirm_overwrite( $pkgname );
        
        say "Overwriting ${pkgname}/PKGBUILD..." unless $QUIET;
        unlink "$pkgname/PKGBUILD";
    }
    else {
        mkdir $pkgname or die qq{failed to "mkdir $pkgname": $!};
        say "Creating ${pkgname}/PKGBUILD..." unless $QUIET;
    }
    $dist_obj->create_pkgbuild( $pkgname );

    return;
}

sub cpan_pkg
{
    my $mod_obj = shift;
    $mod_obj->install( target  => shift,
                       format  => 'CPANPLUS::Dist::Arch',
                       verbose => $VERBOSE,
                       pkg     => 'src',
                       destdir => getcwd())
}

## AUR PACKAGE UPLOAD
##############################################################################

sub load_last_login
{
    return () unless ( -e $CFGPATH );

    die q{Please 'chmod 600 ~/.cpan2aur', it is not readable}
        unless ( -r $CFGPATH );

    open my $cfgfile, '<', $CFGPATH or die "open $CFGPATH: $!";
    my ($user, $sid) = split ':', <$cfgfile>;
    close $cfgfile;

    return () unless ( $user && $sid && $sid =~ /^[A-F0-9]+$/m );

    chomp $sid;
    return ($user, $sid);
}

sub save_last_login
{
    my ($username, $sid) = @_;

    # Set umask to keep this file private...
    my ($oldmask, $found) = (umask 0077, 0);
    $username = lc $username;

    open my $cfgfile, '>', $CFGPATH or die "open $CFGPATH: $!";
    print $cfgfile "$username:$sid\n";
    close $cfgfile or die "close $CFGPATH: $!";

    umask $oldmask;
    return;
}

sub new_login_sid
{
    my ($ua, $username, $passwd) = @_;

    # Get a fresh session ID cookie...
    $ua->cookie_jar( HTTP::Cookies->new() );
    my $resp = $ua->post( AUR_LOGIN_URI,
                          [ user        => $username,
                            passwd      => $passwd,
                            remember_me => 1, # probably not needed
                           ] );

    # Check for problems...
    die "Bad username or password\n"
        if ( $resp->content =~ /$BAD_LOGIN_MSG/ );

    die "Error with AUR login, expected status code 302.\nGot status: ",
        $resp->status_line if !( $resp->code == 302  && !$resp->is_success );

    my $sid;
    $ua->cookie_jar()->scan( sub { $sid = $_[2] if $_[1] eq COOKIE_NAME; } );

    die "ERROR Login did not supply us with an AURSID cookie\n"
        unless ( $sid );

    return $sid;
}

sub mk_session_cookie
{
    my ($sid) = @_;

    my %cookies = ( COOKIE_NAME() => $sid,
                    AURLANG       => 'en', );

    my $cookie_obj = HTTP::Cookies->new();
    for my $name ( keys %cookies ) {
        $cookie_obj->set_cookie( q{}, $name, $cookies{$name},
                                 q{/}, 'aur.archlinux.org' );
    }

    return $cookie_obj;
}

sub post_upload
{
    my ($ua, $pkg_path) = @_;

    my $resp = $ua->post( AUR_UPLOAD_URI,
                          'Content-Type' => 'form-data',
                          'Content'      => [ category  => CAT_LIB(),
                                              submit    => 'Upload',
                                              pkgsubmit => 1,
                                              pfile     => [ $pkg_path ],
                                             ] );

    # We get a 302 Moved HTTP status code on success and when uploading a package
    # that we own if the package file is older and ignored...
    return if ( $resp->code() == 302 );
    
    die "Error when uploading file, got http status ", $resp->status_line
        unless ( $resp->is_success );

    die $NEED_LOGIN_ERR if ( $resp->content =~ /$NEED_LOGIN_MSG/ );
    die $PKG_EXISTS_ERR if ( $resp->content =~ /$PKG_EXISTS_MSG/ );
}

sub prompt
{
    exit TOOQUIET_ERRCODE if $QUIET;
    return Term::ReadLine->new( 'cpan2aur' )->readline( shift );
}

sub upload_to_aur
{
    my ($pkg_path) = @_;
    local $OUTPUT_AUTOFLUSH = 1;

    msg "Uploading $pkg_path to AUR...\n";

    my ($username, $sid) = load_last_login();
    $username ||= prompt( 'Username:' );
    my $ua      = LWP::UserAgent->new();

    # First try to reuse an old Session ID...
    if ( $sid ) {
        msg( "Sending package as $username... " );
        $ua->cookie_jar( mk_session_cookie( $sid ));
        eval { post_upload( $ua, $pkg_path ) };
        unless ( $EVAL_ERROR ) {
            msg( "ok\n" );
            return;
        }

        # Fall through to get a new session ID if we just need to re-login...
        die $@ unless ( $EVAL_ERROR =~ /$NEED_LOGIN_ERR/ );

        msg( "old session ID failed. Starting new session.\n" );
    }

    my $passwd = prompt( 'Password:' );

    # Retrieve a new session and save it...
    $sid = new_login_sid( $ua, $username, $passwd );
    save_last_login( $username, $sid );
    msg( "ok\n" );

    msg( "Sending package as $username... " );
    post_upload( $ua, $pkg_path );
    msg( "ok\n" );

    return;
}

## SCRIPT START
##############################################################################

# my $ua = LWP::UserAgent->new;
# my $sid = new_login_sid( $ua, 'juster' );
# say "$sid";

# $ua->cookie_jar( { COOKIE_NAME() => $sid } );
upload_to_aur( $ARGV[0] );

exit 0;

# my $sid = load_login_sid( 'juster' );
# say "\$sid = $sid" if $sid;
# $sid = random_sid();
# save_login_sid( 'juster', $sid );
# exit 0;

my $cb = CPANPLUS::Backend->new;

MODULE_ARG:
for my $modname ( @ARGV ) {
    my $modobj = $cb->module_tree( $modname );

    print "Finding module $modname... " unless $QUIET;

    unless ( $modobj ) {
        unless ( $QUIET ) {
            say 'failed!';
            warn "cpan2aur: Failed to find a module named $modname\n";
        }
        next MODULE_ARG;
    }

    say 'done' unless $QUIET;

    if ( $DIRECTORY ) {
        cpan_pkg( $modobj => 'prepare' ) or die "failed to prepare module";
        create_aurpkgdir( $modobj->status->dist );
        next MODULE_ARG;
    }

    say "Creating source package file... " unless $QUIET;
    cpan_pkg( $modobj => 'create' );
}

__END__

=head1 NAME

cpan2aur - AUR Utility for CPAN perl modules

=head1 SYNOPSIS

cpan2aur Module::Name [ Module::Name, ... Module::Name ]

 -h, --help            Brief help message.
 -m, --man             Full help manpage.
 -q, --quiet           Quiet mode.  Supress our own messages.  Answers
                       the default to any questions.
 -v, --verbose         Allow CPANPLUS to be verbose (spammy).
                       May be useful for debugging.

 -d, --directory       Create a source package directory with a PKGBUILD.
 -f, --force           When using -d switch, overwrite the dir's old
                       PKGBUILD without asking.

 -u, --upload <file>   Upload the generated source package to the AUR.
                       If a file is specified, [try to] upload that
                       instead.
                       * If no module is specified on the command line
                         and a PKGBUILD exists in our current directory,
                         run makepkg and then upload that source package.
                         (see example in cpan2aur --help)
 -n, --name <aurlogin> Use a new username to login to AUR, don't use
                       the last one.

=head1 DESCRIPTION

This is a utility made for creating and uploading perl packages for
the AUR (Archlinux User Repository).  cpan2aur's simplest usage
creates AUR source packages in the current directory.

With the I<-d> or I<--directory> flags cpan2aur will create a
directory to contain the source package and generate a C<PKGBUILD>
inside it.

With the I<-u> or I<--upload> flag it will upload a source package to
the AUR.  It will try to Do The Right Thing (tm) for uploading.  We
store previous logins inside the file C<~/.cpan2aur>.  The last username
that was used will be retried.  To specify a new name use the I<-n> or
I<--name> flag.

=over

=item 1. If an argument is given to I<-u> then just try uploading that file.
         (It must end in .pkg.tar.gz, though)

=item 2. If we are inside a source package directory (with a PKGBUILD),
         try to run 'makepkg' and then uplaod the resulting file.

=item 3. Otherwise, create a vanilla .pkg.tar.gz file and then upload it.

=back

=head1 EXAMPLE

Here is how to use the directory and upload features in your AUR
packaging workflow:

 cpan2aur -d ALPM     ( 1. We create a source package dir )
 cd perl-alpm         ( 2. Enter it                       )
 ed PKGBUILD          ( 3. Tweak the PKGBUILD a bit       )
 cpan2aur -u          ( 4. Run makepkg and upload!        )
                      ( 5. Done                           )

=head1 SEE ALSO

L<http://aur.archlinux.org>

=head1 AUTHOR

Justin Davis, C<< <jrcd83 gmail> >>, juster on L<http://bbs.archlinux.org>

=head1 COPYRIGHT & LICENSE

Copyright 2010 Justin Davis, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut
